import streamlit as st
import os
import requests
import io
from PIL import Image
import pyodbc
import time
import pyzbar.pyzbar as pyzbar
from azure.cognitiveservices.vision.computervision import ComputerVisionClient
from azure.cognitiveservices.vision.computervision.models import OperationStatusCodes
from msrest.authentication import CognitiveServicesCredentials
from dotenv import load_dotenv

load_dotenv()

# Azure Cognitive Services credentials
subscription_key = os.environ["SUBSCRIPTION_KEY"]
endpoint = os.environ["ENDPOINT"]
computervision_client = ComputerVisionClient(endpoint, CognitiveServicesCredentials(subscription_key))

# Database connection details
database_host = os.environ.get("DATABASE_HOST")
database_port = os.environ.get("DATABASE_PORT")
database_name = os.environ.get("DATABASE_NAME")
database_user = os.environ.get("DATABASE_USER")
database_password = os.environ.get("DATABASE_PASSWORD")
connection_string = f"DRIVER={{ODBC Driver 18 for SQL Server}};SERVER={database_host},{database_port};DATABASE={database_name};UID={database_user};PWD={database_password};Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;"

# Function to perform OCR on an image URL
def extract_text_from_image(image_url):
    read_response = computervision_client.read(image_url, raw=True)
    read_operation_location = read_response.headers["Operation-Location"]
    operation_id = read_operation_location.split("/")[-1]

    # Wait for operation to complete
    while True:
        read_result = computervision_client.get_read_result(operation_id)
        if read_result.status not in ['notStarted', 'running']:
            break
        time.sleep(1)

    # Extract text from the result
    detected_text = ""
    if read_result.status == OperationStatusCodes.succeeded:
        for text_result in read_result.analyze_result.read_results:
            for line in text_result.lines:
                detected_text += line.text + "\n"
    else:
        st.error("Failed to extract text from the image.")

    return detected_text

# Function to extract QR code from an image URL
def extract_qr_code(image_url):
    response = requests.get(image_url)
    img = Image.open(io.BytesIO(response.content))
    decoded_objects = pyzbar.decode(img)
    decoded_text = ""
    for obj in decoded_objects:
        decoded_text += obj.data.decode('utf-8') + "\n"
    return decoded_text

# Function to query the database for client details based on NumbBill
def query_database(numbill):
    try:
        conn = pyodbc.connect(connection_string)
        cursor = conn.cursor()
        sql_query = f"SELECT * FROM sql_db_ocr.dbo.Billing WHERE NumbBill = '{numbill}'"
        cursor.execute(sql_query)
        columns = [column[0] for column in cursor.description]
        rows = cursor.fetchall()
        return columns, rows
    except Exception as e:
        return None, str(e)
    finally:
        if 'conn' in locals():
            conn.close()

# OCR Page
def ocr_page():
    st.title("OCR Page")
    st.write("Upload an image of an invoice for OCR processing.")
    uploaded_file = st.file_uploader("Upload Image", type=["jpg", "jpeg", "png"])

    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        st.image(image, caption='Uploaded Image', use_column_width=True)
        if st.button("Perform OCR"):
            st.write("OCR Processing...")
            text = extract_text_from_image(uploaded_file)
            st.write(text)

# Reporting Page (Placeholder)
def reporting_page():
    st.title("Reporting Page")
    st.write("Automated reporting of supplier accounting will be displayed here.")

# Monitoring Page (Placeholder)
def monitoring_page():
    st.title("Monitoring Page")
    st.write("Monitoring of the Azure OCR service will be displayed here.")

# Main function to run the Streamlit app
def main():
    pages = {
        "OCR Page": ocr_page,
        "Reporting Page": reporting_page,
        "Monitoring Page": monitoring_page
    }
    st.sidebar.title("Navigation")
    selection = st.sidebar.radio("Go to", list(pages.keys()))
    page = pages[selection]
    page()

if __name__ == "__main__":
    main()

